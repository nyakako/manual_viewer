# Generated by Django 4.2.2 on 2023-07-04 01:12

import ckeditor_uploader.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=150, verbose_name='ユーザー名')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='メールアドレス')),
                ('is_active', models.BooleanField(default=True, help_text='退職者等、利用しないユーザーは削除せずにこのチェックを外してください。', verbose_name='利用中')),
                ('is_staff', models.BooleanField(default=False, help_text='チェックすると管理者サイトへのログイン、すべてのマニュアルの参照が可能になります。', verbose_name='管理者')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
            ],
            options={
                'verbose_name': 'ユーザー',
                'verbose_name_plural': 'ユーザー',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='カテゴリ名')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
            ],
            options={
                'verbose_name': 'カテゴリ',
                'verbose_name_plural': 'カテゴリ',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='部署名')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
            ],
            options={
                'verbose_name': '部署',
                'verbose_name_plural': '部署',
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_number', models.CharField(max_length=255, verbose_name='ドキュメント番号')),
                ('document_title', models.CharField(max_length=255, verbose_name='ドキュメントタイトル')),
                ('document_filename', models.CharField(blank=True, max_length=255, null=True, verbose_name='ドキュメントファイル名')),
                ('document_content', ckeditor_uploader.fields.RichTextUploadingField(verbose_name='ドキュメント内容')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
            ],
            options={
                'verbose_name': 'マニュアル',
                'verbose_name_plural': 'マニュアル',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='作業名')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
                ('category', models.ForeignKey(blank=True, help_text='カテゴリ名、部署名で検索できます。', null=True, on_delete=django.db.models.deletion.CASCADE, to='manualapp.category', verbose_name='カテゴリ')),
            ],
            options={
                'verbose_name': '作業',
                'verbose_name_plural': '作業',
            },
        ),
        migrations.CreateModel(
            name='Step',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='手順名')),
                ('order', models.PositiveIntegerField(default=1, help_text='手順一覧での表示順です。', verbose_name='ステップ')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
                ('documents', models.ManyToManyField(blank=True, help_text='ドキュメント番号、ドキュメントタイトルで検索できます。', to='manualapp.document', verbose_name='関連ドキュメント')),
                ('next_steps', models.ManyToManyField(blank=True, help_text='手順名、作業名で検索できます。', related_name='previous_steps', to='manualapp.step', verbose_name='後手順')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manualapp.task', verbose_name='作業')),
            ],
            options={
                'verbose_name': '作業手順',
                'verbose_name_plural': '作業手順',
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='category',
            name='department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='manualapp.department', verbose_name='部署'),
        ),
        migrations.CreateModel(
            name='Bookmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='manualapp.document', verbose_name='ドキュメント')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='ユーザー')),
            ],
            options={
                'verbose_name': 'ブックマーク',
                'verbose_name_plural': 'ブックマーク',
            },
        ),
        migrations.AddField(
            model_name='customuser',
            name='department',
            field=models.ForeignKey(blank=True, help_text='管理者以外は所属している部署のマニュアルのみ参照可能です。', null=True, on_delete=django.db.models.deletion.PROTECT, to='manualapp.department', verbose_name='部署'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
